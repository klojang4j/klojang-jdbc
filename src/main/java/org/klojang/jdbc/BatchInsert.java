package org.klojang.jdbc;

import org.klojang.check.Check;
import org.klojang.jdbc.x.Err;
import org.klojang.jdbc.x.JDBC;
import org.klojang.jdbc.x.Utils;
import org.klojang.jdbc.x.sql.BatchInsertConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import static java.sql.Statement.NO_GENERATED_KEYS;
import static java.sql.Statement.RETURN_GENERATED_KEYS;
import static org.klojang.check.CommonChecks.zero;
import static org.klojang.check.CommonExceptions.STATE;
import static org.klojang.jdbc.x.Err.NO_KEYS_WERE_GENERATED;
import static org.klojang.jdbc.x.Msg.EXECUTING_SQL;
import static org.klojang.jdbc.x.Strings.ID_PROPERTY;
import static org.klojang.util.ArrayMethods.EMPTY_LONG_ARRAY;
import static org.klojang.util.ArrayMethods.implode;
import static org.klojang.util.ClassMethods.className;
import static org.klojang.util.StringMethods.append;

/**
 * <p>{@code SQLBatchInsert} specializes in saving large batches of JavaBeans or records
 * to the database. Instances are configured and obtained via a
 * {@link BatchInsertBuilder}. A {@code SQLBatchInsert} is not underpinned by a
 * {@link java.sql.PreparedStatement}. Yet, it provides just as much protection against
 * SQL injection, as it will process each and every value in the batch using
 * {@link Quoter#quoteValue(Object) Quoter.quoteValue()}. This method ultimately relies on
 * {@link Statement#enquoteLiteral(String) Statement.enquoteLiteral()} &#8212; in other
 * words, the JDBC driver's own escape-and-quote mechanism.
 *
 * <h2>Batch Insert Variants</h2>
 *
 * <p><i>Klojang JDBC</i> provides two options for saving batches of beans:
 *
 * <ol>
 *   <li>using this class
 *   <li>using {@link SQLInsert#insertBatch(List) SQLInsert.insertBatch()}
 * </ol>
 *
 * <p>Functionally these options are equivalent, but they implement the batch insert
 * operation differently, so if performance is important, you should test which one works
 * best for your use case. Otherwise, which one you choose largely is a matter of taste.
 *
 * @param <T> the type of the JavaBeans or records to save to the database.
 * @see BatchInsertBuilder
 * @see SQL#insertBatch()
 */
@SuppressWarnings({"resource"})
public final class BatchInsert<T> {

  private static final Logger LOG = LoggerFactory.getLogger(AbstractSQLSession.class);

  private final BatchInsertConfig<T> cfg;
  private final String[] props;
  private final String sqlBase;

  BatchInsert(BatchInsertConfig<T> cfg) {
    this.cfg = cfg;
    this.props = cfg.reader().getReadableProperties().toArray(String[]::new);
    this.sqlBase = getSqlBase(cfg, props);
  }

  /**
   * Saves the provided beans or records to the database.
   *
   * @param beans the beans to save
   */
  public void insertBatch(List<T> beans) {
    Check.notNull(beans);
    if (!beans.isEmpty()) {
      int chunkSize = cfg.chunkSize() == -1 ? beans.size() : cfg.chunkSize();
      insertBatch(beans, chunkSize);
    }
  }

  /**
   * Saves the provided beans or records to the database and returns the keys generated by
   * the database. If no keys were generated by the database, a zero-length {@code long[]}
   * array is returned.
   *
   * @param beans the beans to save
   * @return the keys generated by the database
   */
  public long[] insertBatchAndGetIDs(List<T> beans) {
    Check.notNull(beans);
    if (beans.isEmpty()) {
      return EMPTY_LONG_ARRAY;
    }
    int chunkSize = cfg.chunkSize() == -1 ? beans.size() : cfg.chunkSize();
    return insertBatchAndGetIDs(beans, chunkSize);
  }

  /**
   * Saves the provided beans or records to the database and sets the specified ID
   * property in each of them to the key generated by the database. Obviously, the ID
   * property must be mutable in that case, so {@code <T>} must not be a {@code record}
   * type.
   *
   * @param idProperty the name of the property corresponding to the primary key
   * @param beans the beans to save
   */
  public void insertBatchAndSetIDs(String idProperty, List<T> beans) {
    Check.notNull(idProperty, ID_PROPERTY);
    Check.notNull(beans);
    Class<T> clazz = cfg.reader().getBeanClass();
    Check.on(STATE, clazz).isNot(Class::isRecord, Err.NOT_MUTABLE, className(clazz));
    if (!beans.isEmpty()) {
      int chunkSize = cfg.chunkSize() == -1 ? beans.size() : cfg.chunkSize();
      insertBatchAndSetIDs(beans, idProperty, chunkSize);
    }
  }

  private void insertBatch(List<T> beans, int chunkSize) {
    for (int i = 0; i < beans.size(); i += chunkSize) {
      int j = Math.min(beans.size(), i + chunkSize);
      try {
        insertChunk(beans.subList(i, j));
      } catch (Throwable t) {
        throw Utils.wrap(t);
      }
    }
  }

  private long[] insertBatchAndGetIDs(List<T> beans, int chunkSize) {
    long[] allKeys = new long[beans.size()];
    for (int i = 0; i < beans.size(); i += chunkSize) {
      int j = Math.min(beans.size(), i + chunkSize);
      try {
        long[] keys = insertChunkAndGetIDs(beans.subList(i, j));
        System.arraycopy(keys, 0, allKeys, i, j);
      } catch (Throwable t) {
        throw Utils.wrap(t);
      }
    }
    return allKeys;
  }

  private void insertBatchAndSetIDs(List<T> beans, String idProperty, int chunkSize) {
    for (int i = 0; i < beans.size(); i += chunkSize) {
      int j = Math.min(beans.size(), i + chunkSize);
      try {
        insertChunkAndSetIDs(beans.subList(i, j), idProperty);
      } catch (Throwable t) {
        throw Utils.wrap(t);
      }
    }
  }

  private void insertChunk(List<T> beans) throws Throwable {
    StringBuilder sql = new StringBuilder(guessSize(beans));
    sql.append(sqlBase);
    try (Statement stmt = cfg.connection().createStatement()) {
      addRows(sql, stmt, beans);
      String s = sql.toString();
      LOG.trace(EXECUTING_SQL, s);
      stmt.executeUpdate(s, NO_GENERATED_KEYS);
    }
    commit();
  }

  private long[] insertChunkAndGetIDs(List<T> beans) throws Throwable {
    long[] keys;
    StringBuilder sql = new StringBuilder(guessSize(beans));
    sql.append(sqlBase);
    try (Statement stmt = cfg.connection().createStatement()) {
      addRows(sql, stmt, beans);
      String s = sql.toString();
      LOG.trace(EXECUTING_SQL, s);
      stmt.executeUpdate(s, RETURN_GENERATED_KEYS);
      keys = JDBC.getGeneratedKeys(stmt, beans.size());
    }
    commit();
    return keys;
  }

  private void insertChunkAndSetIDs(List<T> beans, String idProperty) throws Throwable {
    StringBuilder sql = new StringBuilder(guessSize(beans));
    sql.append(sqlBase);
    try (Statement stmt = cfg.connection().createStatement()) {
      addRows(sql, stmt, beans);
      String s = sql.toString();
      LOG.trace(EXECUTING_SQL, s);
      stmt.executeUpdate(s, RETURN_GENERATED_KEYS);
      long[] keys = JDBC.getGeneratedKeys(stmt, beans.size());
      Utils.check(keys.length).isNot(zero(), NO_KEYS_WERE_GENERATED);
      for (int i = 0; i < keys.length; ++i) {
        JDBC.setID(beans.get(i), idProperty, keys[i]);
      }
    }
    commit();
  }

  private void addRows(StringBuilder sql, Statement stmt, List<T> beans) {
    int i = 0;
    for (T bean : beans) {
      if (i++ > 0) {
        sql.append(',');
      }
      addRow(sql, stmt, bean);
    }
  }

  private void addRow(StringBuilder sql, Statement stmt, T bean) {
    BatchInsertConfig<T> cfg = this.cfg;
    Quoter quoter = new Quoter(stmt);
    List<Object> values = cfg.reader().readAllProperties(bean);
    sql.append('(');
    for (int i = 0; i < props.length; ++i) {
      if (i > 0) {
        sql.append(',');
      }
      Object val = cfg.processor().process(bean, props[i], values.get(i), quoter);
      sql.append(quoter.quoteValue(val));
    }
    sql.append(')');
  }

  private void commit() throws SQLException {
    if (cfg.commitPerChunk() && !cfg.connection().getAutoCommit()) {
      cfg.connection().commit();
    }
  }

  private static String getSqlBase(BatchInsertConfig<?> cfg, String[] props) {
    String cols = implode(props, cfg.mapper()::map, ",");
    StringBuilder sb = new StringBuilder(cols.length() + 40);
    append(sb, "INSERT INTO ", cfg.tableName(), '(', cols, ")VALUES");
    return sb.toString();
  }

  private int guessSize(List<T> beans) {
    return 50 + (props.length * beans.size() * 12);
  }

}
