package org.klojang.jdbc;

import org.klojang.invoke.Getter;
import org.klojang.jdbc.x.JDBC;
import org.klojang.jdbc.x.sql.BatchInsertConfig;
import org.klojang.jdbc.x.sql.SQLExpression;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;

import static org.klojang.util.ArrayMethods.implode;
import static org.klojang.util.StringMethods.append;

/**
 * <p>{@code SQLBatchInsert} is a specialised database INSERT class that allows for
 * possibly very large batches of JavaBeans to be saved to the database. Note that
 * {@code SQLBatchInsert} is not a subclass of {@link SQLStatement}. It is not underpinned
 * by prepared statements (i.e. the {@link PreparedStatement} class). It still protects
 * against SQL injection, though, as all values except numbers are quoted and escaped
 * using the target database's quoting and escaping rules.
 *
 * <p>{@code SQLBatchInsert} implements {@link AutoCloseable} in order to stay aligned
 * with {@link SQLStatement} and its subclasses, and more specifically so you can easily
 * change between {@link SQLInsert} and {@code SQLBatchInsert} within your code. However,
 * its {@code close()} method currently is a no-op. It is not necessary to use a
 * try-with-resource block with {@code SQLBatchInsert}.
 *
 * <p>Here is an example that saves a batch of {@code Person} beans to the database and
 * then sets the ID property of each bean to the key generated by the database:
 *
 * <blockquote><pre>{@code
 * List<Person> persons = List.of(new Person("John"),
 *    new Person("Mary"),
 *    new Person("Joe"));
 * try (SQLBatchInsert<Person> insert = SQL
 *    .prepareBatchInsert()
 *    .of(Person.class)
 *    .into("TEST")
 *    .excluding("personId")
 *    .prepare(conn)) {
 *  insert.insertBatchAndSetIDs("personId", persons);
 * }
 * }</pre></blockquote>
 *
 * @param <T> the type of the JavaBeans to save to the database.
 */
public final class SQLBatchInsert<T> implements AutoCloseable {

  private final BatchInsertConfig<T> cfg;

  private final String[] properties;
  private final String sqlBase;

  SQLBatchInsert(BatchInsertConfig<T> cfg) {
    this.cfg = cfg;
    this.properties = cfg.getters().keySet().toArray(String[]::new);
    this.sqlBase = getSqlBase();
  }

  /**
   * Saves the provided beans to the database.
   *
   * @param beans the beans to save
   */
  public void insertBatch(List<T> beans) {
    int chunkSize = cfg.chunkSize() == -1 ? beans.size() : cfg.chunkSize();
    insertBatch(beans, chunkSize);
  }

  /**
   * Saves the provided beans to the database.
   *
   * @param beans the beans to save
   * @return the keys generated by the database
   */
  public long[] insertBatchAndGetIDs(List<T> beans) {
    int chunkSize = cfg.chunkSize() == -1 ? beans.size() : cfg.chunkSize();
    return insertBatchAndGetIDs(beans, chunkSize);
  }

  /**
   * Saves the specified JavaBeans to the database and sets the specified ID property in
   * each of them to the key generated by the database.
   *
   * @param idProperty the name of the property corresponding to the primary key
   * @param beans the beans to save
   */
  public void insertBatchAndSetIDs(String idProperty, List<T> beans) {
    int chunkSize = cfg.chunkSize() == -1 ? beans.size() : cfg.chunkSize();
    insertBatchAndSetIDs(beans, idProperty, chunkSize);
  }

  private void insertBatch(List<T> beans, int chunkSize) {
    for (int i = 0; i < beans.size(); i += chunkSize) {
      int j = Math.min(beans.size(), i + chunkSize);
      try {
        insertChunk(beans.subList(i, j));
      } catch (Throwable t) {
        throw new KlojangSQLException(t);
      }
    }
  }

  private long[] insertBatchAndGetIDs(List<T> beans, int chunkSize) {
    long[] allKeys = new long[beans.size()];
    for (int i = 0; i < beans.size(); i += chunkSize) {
      int j = Math.min(beans.size(), i + chunkSize);
      try {
        long[] keys = insertChunkAndGetIDs(beans.subList(i, j));
        System.arraycopy(keys, 0, allKeys, i, j);
      } catch (Throwable t) {
        throw new KlojangSQLException(t);
      }
    }
    return allKeys;
  }

  private void insertBatchAndSetIDs(List<T> beans, String idProperty, int chunkSize) {
    for (int i = 0; i < beans.size(); i += chunkSize) {
      int j = Math.min(beans.size(), i + chunkSize);
      try {
        insertChunkAndSetIDs(beans.subList(i, j), idProperty);
      } catch (Throwable t) {
        throw new KlojangSQLException(t);
      }
    }
  }

  private void insertChunk(List<T> beans) throws Throwable {
    List<Map<String, Object>> rows = new ArrayList<>(beans.size());
    try (Statement stmt = cfg.connection().createStatement()) {
      for (T bean : beans) {
        rows.add(createRow(stmt, bean));
      }
      execute(stmt, rows, false);
    }
    commit();
  }

  private long[] insertChunkAndGetIDs(List<T> beans) throws Throwable {
    long[] keys;
    List<Map<String, Object>> rows = new ArrayList<>(beans.size());
    try (Statement stmt = cfg.connection().createStatement()) {
      for (T bean : beans) {
        rows.add(createRow(stmt, bean));
      }
      execute(stmt, rows, true);
      keys = JDBC.getGeneratedKeys(stmt, beans.size());
    }
    commit();
    return keys;
  }

  private void insertChunkAndSetIDs(List<T> beans, String idProperty) throws Throwable {
    List<Map<String, Object>> rows = new ArrayList<>(beans.size());
    try (Statement stmt = cfg.connection().createStatement()) {
      for (T bean : beans) {
        rows.add(createRow(stmt, bean));
      }
      execute(stmt, rows, true);
      long[] keys = JDBC.getGeneratedKeys(stmt, beans.size());
      for (int i = 0; i < keys.length; ++i) {
        JDBC.setID(beans.get(i), idProperty, keys[i]);
      }
    }
    commit();
  }

  private Map<String, Object> createRow(Statement stmt, T bean) throws Throwable {
    Map<String, Object> row = HashMap.newHashMap(cfg.getters().size());
    for (Getter getter : cfg.getters().values()) {
      String property = getter.getProperty();
      Object value = getter.read(bean);
      BiFunction<T, Object, Object> fnc = cfg.transformers().get(property);
      if (fnc != null) {
        value = fnc.apply(bean, value);
      }
      if (value == null) {
        row.put(property, "null");
      } else if (value instanceof Number || value.getClass() == SQLExpression.class) {
        row.put(property, value);
      } else {
        row.put(property, stmt.enquoteLiteral(value.toString()));
      }
    }
    return row;
  }

  @Override
  public void close() { }

  private void execute(Statement stmt, List<Map<String, Object>> rows, boolean keys)
      throws SQLException {
    StringBuilder sb = new StringBuilder(1024);
    sb.append(sqlBase);
    int i = 0;
    for (Map<String, Object> row : rows) {
      if (i++ != 0) { sb.append(','); }
      sb.append('(');
      for (int j = 0; j < properties.length; ++j) {
        if (j != 0) { sb.append(','); }
        sb.append(row.get(properties[j]));
      }
      sb.append(')');
    }
    if (keys) {
      stmt.executeUpdate(sb.toString(), Statement.RETURN_GENERATED_KEYS);
    } else {
      stmt.executeUpdate(sb.toString(), Statement.NO_GENERATED_KEYS);
    }
  }

  private void commit() throws SQLException {
    if (cfg.commitPerChunk()) {
      cfg.connection().commit();
    }
  }

  private String getSqlBase() {
    String cols = implode(properties, cfg.mapper()::map, ",");
    StringBuilder sb = new StringBuilder(100);
    append(sb, "INSERT INTO ", cfg.tableName(), '(', cols, ")VALUES");
    return sb.toString();
  }

}
